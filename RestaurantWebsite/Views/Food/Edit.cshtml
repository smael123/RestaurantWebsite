@using MyToolkit.Html
@model RestaurantWebsite.ViewModels.FoodFormViewModel

@{
    string h1Text = (Model.Id != 0) ? ("Edit " + Model.Name) : "New Food";
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = h1Text;
}

    <h1>@h1Text</h1>

    @using (Html.BeginForm("Save", "Food"))
    {
        @Html.ValidationSummary(true, "Please fix the following errors")
        <div class="form-group">
            @Html.LabelFor(c => c.Name)
            @Html.TextBoxFor(c => c.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(c => c.Name)
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Description)
            @Html.TextAreaFor(c => c.Description, new { @class = "form-control" })
            @Html.ValidationMessageFor(c => c.Description)
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.BasePrice)
            @Html.TextBoxFor(c => c.BasePrice, new { @class = "form-control" })
            @Html.ValidationMessageFor(c => c.BasePrice)
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var extra in Model.Extras)
                {
                    <tr>
                        <td>@Html.DisplayTextFor(c => extra.Name)</td>
                        <td>@Html.DisplayTextFor(c => extra.AddedPrice)</td>
                        <td>@Html.ActionLink("Edit", "Edit", "Extra", new { id = extra.Id }, null)</td>
                    </tr>
                }
            </tbody>
        </table>

        @Html.ActionLink("New Extra", "New", "Extra", new { foodId = Model.Id }, new { @class = "btn btn-secondary new-item" })

        //Why do i need to wrap it?
        @Html.Action("GetAllOfFood", "FoodPicture", new { foodId = Model.Id })

        @Html.HiddenFor(c => c.Id)
        <button type="submit" class="btn btn-primary">Save</button>
    }


@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}